{
    "contents" : "stochastic.sim <- function(param, initial.state,\n                           dx.dt.func,\n                           max.step=1e3,\n                           iters=1e3) {\n\n    # initialize matrix for output\n    sim.data <- matrix(ncol=2, nrow=iters)\n\n    # run simulation\n    for (s in 1:iters) {\n        sim.data[s, ] <- stochastic.run(param, initial.state,\n                                        dx.dt.func, max.step)\n    }\n\n    # calculate 95% quantile based interval for attack rate\n    attack.rate <- sim.data[, 2] / sim.data[, 1]\n    sim.ci <- quantile(attack.rate, c(0.025, 0.5, 0.975))\n\n    return(sim.ci)\n}\n\nstochastic.run <- function(param, initial.state, \n                           dx.dt.func, \n                           max.step) {\n    # let's assume the model is NOT freq dependent for simplicity\n\n    # initialize time, y, and counters for pts and diseased\n    t <- 1\n    y <- initial.state\n\n    # consider are \"susceptibles\" to be the resistant and \n    # to start\n    uninf <- sum(y[c(\"R\", \"S\")])\n\n    # any initial diseased people are not initially counted\n    inf <- 0\n\n    # store values\n#     sir.output <- matrix(ncol=1 + length(y), nrow=max.step)\n#     colnames(sir.output) <- c(\"time\", names(y))\n#     sir.output[1,] <- c(t, y)\n\n    # while there are no colonized (w/ or w/o protection) or diseased\n    # and while we are lt max step\n    while (sum(y[c(\"C\", \"P\", \"D\")], na.rm=TRUE) & t < max.step) { \n        # NAs removed for models that collapse colonized to one compartment\n        t <- t + 1\n\n        # dx.dt.func should be passed as function name \n        # not as a string\n        delta <- dx.dt.func(1, y, param)\n\n        y <- y + delta$changes\n        inf <- inf + delta$colonizations\n        uninf <- uninf + delta$resistant.again\n\n#         sir.output[t, ] <- c(t, y)\n    }\n\n#     sir.output <- sir.output[rowSums(is.na(sir.output)) != \n#                              ncol(sir.output), ]\n#     sir.output <- na.omit(sir.output)\n    \n#     return(sir.output)\n    return(c(uninfected=uninf, infected=inf))\n}\n\nstochastic.dx.dt <- function(step.size, y, param) {\n    R <- y[\"R\"]\n    S <- y[\"S\"]\n    P <- y[\"P\"]\n    C <- y[\"C\"]\n    D <- y[\"D\"]\n\n    # calculate lambda\n    lambda <- param[\"beta.c\"] * (C + P) + \n              param[\"beta.d\"] * D\n    ## probabilities\n\n    # antibiotic treatment\n    p.anti.tx <- 1 - exp(-step.size * param[\"alpha\"])\n\n    # restoration of colonization resistance\n    p.col.res <- 1 - exp(-step.size * param[\"theta\"])\n\n    # treatment success\n    p.tx.suc <- 1 - exp(-step.size * param[\"p\"] * param[\"epsilon\"])\n\n    # col w/o immune response\n    p.col.minus <- 1 - exp(-step.size * (1 - param[\"f\"]) * lambda * S)\n\n    # col w/ immune reponse\n    p.col.plus <- 1 - exp(-step.size * param[\"f\"] * lambda * S)\n\n    # disease\n    p.disease <- 1 - exp(-step.size * param[\"phi\"] * C)\n\n    # discharge rates\n    p.res.dis <- 1 - exp(-step.size * param[\"k.r\"])\n    p.sus.dis <- 1 - exp(-step.size * param[\"k\"])\n    p.c.min.dis <- p.c.plu.dis <- p.sus.dis\n    p.dis.dis <- 1 - exp(-step.size * param[\"k.d\"])\n\n    # calculate changes across compartments\n    anti.tx <- rbinom(1, R, p.anti.tx)\n    col.rs <- rbinom(1, S, p.col.res)\n    tx.suc <- rbinom(1, D, p.tx.suc)\n    col.minus <- rbinom(1, S, p.col.minus)\n    col.plus <- rbinom(1, S, p.col.plus)\n    disease <- rbinom(1, C, p.disease)\n\n    res.dis <- rbinom(1, R, p.res.dis)\n    sus.dis <- rbinom(1, S, p.sus.dis)\n    c.min.dis <- rbinom(1, C, p.c.min.dis)\n    c.plu.dis <- rbinom(1, P, p.c.plu.dis)\n    dis.dis <- rbinom(1, D, p.dis.dis)\n\n    # deltas for compartments\n    dR <- -anti.tx + col.rs - res.dis\n    dS <- anti.tx - col.rs - sus.dis - col.minus - col.plus\n    dC <- col.minus - disease - c.min.dis\n    dP <- col.plus - c.plu.dis\n    dD <- disease - tx.suc - dis.dis\n\n    # make sure none of the deltas are bigger than the prev comp size\n    dR <- max(dR, -R)\n    dS <- max(dS, -S)\n    dC <- max(dC, -C)\n    dP <- max(dP, -P)\n    dD <- max(dD, -D)\n\n    # careful! need to return in same order as y\n    return(list(changes=c(dR, dS, dP, dC, dD),\n                colonizations=(col.minus + col.plus),\n                resistant.again=col.rs))\n}\n",
    "created" : 1431547425846.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2155627466",
    "id" : "9F0DB785",
    "lastKnownWriteTime" : 1431546602,
    "path" : "~/IDD C. diff/R/stochasticModel.R",
    "project_path" : "R/stochasticModel.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}