source('~/IDD C. diff/R/model.R')
library("deSolve", lib.loc="~/R/win-library/3.1")
dx.dt.new()
y <- c(R=999,S=0,C=0,D=1)
dx.dt.new()
dx.dt.new(y)
\frac{dR}{dt}=a_r\delta N + rho\e D + \theta S - k_r R - \alpha R \\
load("D:/Documents/School Stuff/MPH/Courses/Term 4/ID Dynamics/class exercise/12/.RData")
dx.dt.new
dx.dt.migrateSIR
runMigrateSIR
source('~/IDD C. diff/runModel.R')
source('~/IDD C. diff/runModel.R')
source('~/IDD C. diff/runModel.R')
source('~/IDD C. diff/runModel.R')
results.cdiff <- runModel()
runModel()
source('~/IDD C. diff/runModel.R')
runModel <- function(a.r = 0.75,
results.CDiff <- runModel
plot.ode(results.CDiff)
source('~/IDD C. diff/runModel.R')
results.CDiff <- runModel
runModel()
source('~/IDD C. diff/runModel.R')
runModel()
results.CDiff <- runModel
results.CDiff <- runModel()
plot.ode(results.CDiff)
legend.ode(15,800,results.CDiff)
source('~/IDD C. diff/R/model.R')
source('~/IDD C. diff/R/model.R')
source('~/IDD C. diff/runModel.R')
results.CDiff <- runModel()
plot.ode(results.CDiff)
legend.ode(15,800,results.CDiff)
source('~/IDD C. diff/runModel.R')
legend.ode(15,800,results.CDiff)
legend.ode(15,900,results.CDiff)
legend.ode(15,800,results.CDiff)
source('~/IDD C. diff/R/model.R')
source('~/IDD C. diff/R/model.R')
source('~/IDD C. diff/R/model.R')
source('~/IDD C. diff/R/model.R')
source('~/IDD C. diff/R/model.R')
source('~/IDD C. diff/R/model.R')
source('~/IDD C. diff/R/stochasticModel.R')
source('~/IDD C. diff/R/stochasticModel.R')
source('~/IDD C. diff/R/stochasticModel.R')
source('~/IDD C. diff/R/stochasticModel.R')
source('~/IDD C. diff/R/stochasticModel.R')
source('~/IDD C. diff/R/stochasticModel.R')
source('~/IDD C. diff/R/stochasticModel.R')
source('~/IDD C. diff/R/stochasticModel.R')
source('~/IDD C. diff/R/stochasticModel.R')
source('~/IDD C. diff/R/model.R')
source('~/IDD C. diff/R/stochasticModel.R')
source('~/IDD C. diff/R/runModel.R')
source('~/IDD C. diff/R/runModel.R')
source('~/IDD C. diff/R/runModel.R')
source('~/IDD C. diff/R/runModel.R')
source('~/IDD C. diff/R/runModel.R')
source('~/IDD C. diff/R/runModel.R')
source('~/IDD C. diff/R/runModel.R')
param <- c(a.r=a.r, a.s=a.s, a.cn=a.cn, a.cp=a.cp, a.c=a.c, a.d=a.d, alpha=alpha,
runModel()
source('~/IDD C. diff/R/runModel.R')
source('~/IDD C. diff/R/runModel.R')
library(deSolve)
runModel()
source('~/IDD C. diff/R/runModel.R')
runModel()
results.CDiff <- runModel()
plot.ode(results.CDiff)
legend.ode(15,800,results.CDiff)
library("deSolve", lib.loc="~/R/win-library/3.1")
results.CDiff <- runModel()
plot.ode(results.CDiff)
legend.ode(15,800,results.CDiff)
#Note....the number sign meens the rest of the line is a comment and
results.CDiff <- runModel()
plot.ode(results.CDiff)
legend.ode(15,800,results.CDiff)
library(deSolve)
plot.ode(results.CDiff)
source('~/IDD C. diff/R/runModel.R')
library(deSolve)
plot.ode(results.CDiff)
#Note....the number sign meens the rest of the line is a comment and
source('~/School Stuff/MPH/Courses/Term 4/ID Dynamics/R code/DeterministicSIR.r')
#will not be run. Comment your code a lot!!! Your life will be much easier.
plot.ode(results.CDiff)
source('~/IDD C. diff/R/model.R')
library(deSolve)
source('~/IDD C. diff/R/runModel.R')
runModel <- function(a.r = 0.75,
library(deSolve)
plot.ode(results.CDiff)
runModel()
plot.ode(results.CDiff)
plot.ode <- function(lsoda.output, t.divisor=1)  {
#check if this looks like lsoda.output,
#if not, through an error.
if(!is.matrix(lsoda.output))
stop("'lsoda.output' must be output from odesolve")
#make an empty plot with the appropriate time axis, etc.
plot(0, 0, xlim=range(lsoda.output[,"time"])/t.divisor,
ylim=range(lsoda.output[,2:dim(lsoda.output)[2]]),
xlab="Time",
ylab="State",
type="n")
# plot the lsoda.output using the matlines function
# whcih takes a single x vector and matrix of multiple y
# values.
matlines(lsoda.output[,"time"]/t.divisor,
lsoda.output[,2:dim(lsoda.output)[2]], lwd=2)
}
#Plots the legend for an ODE.
legend.ode <- function(x , y , lsoda.output)
{
#how many states are in the model? (the number of columns excluding time)
num.state <- dim(lsoda.output)[2] - 1
#draw a legend where names are derived from the columns
#of lsoda.output
legend(x, y, legend=colnames(lsoda.output)[2:dim(lsoda.output)[2]],
col=rep(1:6, l=num.state), lty=rep(1:6, l=num.state), lwd=2)
}
source('~/IDD C. diff/R/runModel.R')
plot.ode(results.CDiff)
---
install.packages("ggplot2")
install.packages("dplyr")
install.packages("tidyr")
source('~/IDD C. diff/R/stochasticModel.R')
plot.ode(results.CDiff)
result.CDiff
results.CDiff
library(deSolve)
plot.ode <- function(lsoda.output, t.divisor=1)  {
#check if this looks like lsoda.output,
#if not, through an error.
if(!is.matrix(lsoda.output))
stop("'lsoda.output' must be output from odesolve")
#make an empty plot with the appropriate time axis, etc.
plot(0, 0, xlim=range(lsoda.output[,"time"])/t.divisor,
ylim=range(lsoda.output[,2:dim(lsoda.output)[2]]),
xlab="Time",
ylab="State",
type="n")
# plot the lsoda.output using the matlines function
# whcih takes a single x vector and matrix of multiple y
# values.
matlines(lsoda.output[,"time"]/t.divisor,
lsoda.output[,2:dim(lsoda.output)[2]], lwd=2)
}
#Plots the legend for an ODE.
legend.ode <- function(x , y , lsoda.output)
{
#how many states are in the model? (the number of columns excluding time)
num.state <- dim(lsoda.output)[2] - 1
#draw a legend where names are derived from the columns
#of lsoda.output
legend(x, y, legend=colnames(lsoda.output)[2:dim(lsoda.output)[2]],
col=rep(1:6, l=num.state), lty=rep(1:6, l=num.state), lwd=2)
}
runModel <- function(a.r = 0.75,
a.s = a.s.abx <- 0.22,
a.cn = a.cp <- a.c <- 0.01,
a.d = 0.01,
alpha = 0.5,
theta = theta.ft <- theta.abx <- 0.033,
beta.c = 0.007,
beta.d = 0.007,
f = 0.6,
epsilon.abx = 0.1,
epsilon.ft = 0.01,
p.abx = 0.8,
p.ft = 0.8,
psi = 0.1,
phi = 0.2,
k.r = 0.33,
k = 0.15,
k.d = 0.068,
initial.state= c(R=1e3, S.ft=0, S.abx=0, C=1e1, D=0), #added pop2 and betas code here
max.time = 25) {
#create the parameter vector.
param <- c(a.r=a.r, a.s=a.s, a.cn=a.cn, a.cp=a.cp, a.c=a.c, a.d=a.d, alpha=alpha,
theta=theta, theta.ft=theta.ft, theta.abx=theta.abx, beta.c=beta.c, beta.d=beta.d, f=f,
epsilon.abx=epsilon.abx, epsilon.ft=epsilon.ft, p.abx=p.abx, p.ft=p.ft,  phi=phi, k.r=k.r, k=k, k.d=k.d, psi=psi) #added 4 betas and m code here
#Sequence of times at which we want estimates..
#   ..here we say daily until max.time
times <- seq(0,max.time,1)
#Run the ODE-Sol
library(deSolve)
plot.ode <- function(lsoda.output, t.divisor=1)  {
#check if this looks like lsoda.output,
#if not, through an error.
if(!is.matrix(lsoda.output))
stop("'lsoda.output' must be output from odesolve")
#make an empty plot with the appropriate time axis, etc.
plot(0, 0, xlim=range(lsoda.output[,"time"])/t.divisor,
ylim=range(lsoda.output[,2:dim(lsoda.output)[2]]),
xlab="Time",
ylab="State",
type="n")
# plot the lsoda.output using the matlines function
# whcih takes a single x vector and matrix of multiple y
# values.
matlines(lsoda.output[,"time"]/t.divisor,
lsoda.output[,2:dim(lsoda.output)[2]], lwd=2)
}
#Plots the legend for an ODE.
legend.ode <- function(x , y , lsoda.output)
{
#how many states are in the model? (the number of columns excluding time)
num.state <- dim(lsoda.output)[2] - 1
#draw a legend where names are derived from the columns
#of lsoda.output
legend(x, y, legend=colnames(lsoda.output)[2:dim(lsoda.output)[2]],
col=rep(1:6, l=num.state), lty=rep(1:6, l=num.state), lwd=2)
}
runModel <- function(a.r = 0.75,
a.s = a.s.abx <- 0.22,
a.cn = a.cp <- a.c <- 0.01,
a.d = 0.01,
alpha = 0.5,
theta = theta.ft <- theta.abx <- 0.033,
beta.c = 0.007,
beta.d = 0.007,
f = 0.6,
epsilon.abx = 0.1,
epsilon.ft = 0.01,
p.abx = 0.8,
p.ft = 0.8,
psi = 0.1,
phi = 0.2,
k.r = 0.33,
k = 0.15,
k.d = 0.068,
initial.state= c(R=1e3, S.ft=0, S.abx=0, C=1e1, D=0), #added pop2 and betas code here
max.time = 25) {
#create the parameter vector.
param <- c(a.r=a.r, a.s=a.s, a.cn=a.cn, a.cp=a.cp, a.c=a.c, a.d=a.d, alpha=alpha,
theta=theta, theta.ft=theta.ft, theta.abx=theta.abx, beta.c=beta.c, beta.d=beta.d, f=f,
epsilon.abx=epsilon.abx, epsilon.ft=epsilon.ft, p.abx=p.abx, p.ft=p.ft,  phi=phi, k.r=k.r, k=k, k.d=k.d, psi=psi) #added 4 betas and m code here
#Sequence of times at which we want estimates..
#   ..here we say daily until max.time
times <- seq(0,max.time,1)
#Run the ODE-Solver
sir.output <- lsoda(initial.state, times, dx.dt.new, param)
#now we will return the output.
return(sir.output)
results.CDiff <- runModel()
plot.ode(results.CDiff)
legend.ode(15,800,results.CDiff)
}
lot.ode <- function(lsoda.output, t.divisor=1)  {
#check if this looks like lsoda.output,
#if not, through an error.
if(!is.matrix(lsoda.output))
stop("'lsoda.output' must be output from odesolve")
#make an empty plot with the appropriate time axis, etc.
plot(0, 0, xlim=range(lsoda.output[,"time"])/t.divisor,
ylim=range(lsoda.output[,2:dim(lsoda.output)[2]]),
xlab="Time",
ylab="State",
type="n")
# plot the lsoda.output using the matlines function
# whcih takes a single x vector and matrix of multiple y
# values.
matlines(lsoda.output[,"time"]/t.divisor,
lsoda.output[,2:dim(lsoda.output)[2]], lwd=2)
}
legend.ode <- function(x , y , lsoda.output)
{
#how many states are in the model? (the number of columns excluding time)
num.state <- dim(lsoda.output)[2] - 1
#draw a legend where names are derived from the columns
#of lsoda.output
legend(x, y, legend=colnames(lsoda.output)[2:dim(lsoda.output)[2]],
col=rep(1:6, l=num.state), lty=rep(1:6, l=num.state), lwd=2)
}
runModel()
plot.ode(results.CDiff)
plot.ode(results.CDiff, ylim=1000)
source('~/IDD C. diff/R/runModel.R')
source('~/IDD C. diff/R/model.R')
library(deSolve)
results.CDiff
---
model.new
a.r <- 0.75
# parameters
a.r <- 0.75
a.s <- a.s.abx <- 0.22
a.cn <- a.cp <- a.c <- 0.01
a.d <- 0.01
alpha <- 0.5
theta <- 0.033
theta.abx <- 0.033
theta.ft <- 0.033
beta.c <- beta.d <- 0.007
f <- 0.6
epsilon <- epsilon.abx <- 0.1
epsilon.ft <- 0.01
p <- p.abx <- 0.8
p.ft <- 0.8
psi <- 0.1
phi <- 0.2
k.r <- 0.33
k <- 0.15
k.d <- 0.068
# sequence of times
max.time <- 2.5e1
times <- seq(0, max.time, 1)
# delta
delta <- 1e-1
# parameter vector
param <- c(a.r=a.r, a.s.abx=a.s.abx, a.c=a.c, a.d=a.d, alpha=alpha,
theta.abx=theta.abx, theta.ft=theta.ft, beta.c=beta.c, beta.d=beta.d,
epsilon.abx=epsilon.abx, p.abx=p.abx, phi=phi, k.r=k.r, k=k, k.d=k.d,
epsilon.ft=epsilon.ft, p.ft=p.ft, psi=psi)
# initial state
initial.state <- c(R=1e3, S.ft=0, S.abx=0, C=1e1, D=0)
model.new <- lsoda(initial.state, times, dx.dt.new, param, delta=delta)
model.new
source('~/IDD C. diff/R/calcR0.R')
> a.r <- 0.75
> # parameters
> a.r <- 0.75
> a.s <- a.s.abx <- 0.22
> a.cn <- a.cp <- a.c <- 0.01
> a.d <- 0.01
> alpha <- 0.5
> theta <- 0.033
> theta.abx <- 0.033
> theta.ft <- 0.033
> beta.c <- beta.d <- 0.007
> f <- 0.6
> epsilon <- epsilon.abx <- 0.1
> epsilon.ft <- 0.01
> p <- p.abx <- 0.8
> p.ft <- 0.8
> psi <- 0.1
> phi <- 0.2
> k.r <- 0.33
> k <- 0.15
> k.d <- 0.068
>
> # sequence of times
> max.time <- 2.5e1
> times <- seq(0, max.time, 1)
>
> # delta
> delta <- 1e-1
> # parameter vector
> param <- c(a.r=a.r, a.s.abx=a.s.abx, a.c=a.c, a.d=a.d, alpha=alpha,
+            theta.abx=theta.abx, theta.ft=theta.ft, beta.c=beta.c, beta.d=beta.d,
+            epsilon.abx=epsilon.abx, p.abx=p.abx, phi=phi, k.r=k.r, k=k, k.d=k.d,
+            epsilon.ft=epsilon.ft, p.ft=p.ft, psi=psi)
>
> # initial state
> initial.state <- c(R=1e3, S.ft=0, S.abx=0, C=1e1, D=0)
>
> R0.test <- lsoda(initial.state, times, calc.R0, param, delta=delta)
source('~/IDD C. diff/R/calcR0.R')
source('~/IDD C. diff/R/calcR0.R')
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
source('~/IDD C. diff/R/model.R')
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
# libraries
library(deSolve)
library(ggplot2)
library(dplyr)
library(tidyr)
theme_set(theme_classic())
# programs
source("../R/model.R")
source("../R/stochasticModel.R")
